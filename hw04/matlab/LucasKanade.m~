function [u,v] = LucasKanade(It,It1,rect)
It = im2double(rgb2gray(It));
It1 = im2double(rgb2gray(It1));
% 330,215
% 420,270
T = It(rect(1):rect(3),rect(2):rect(4));
x = 0;
 y = 0;
 p1 = 0;
 p2 = 0;
 p3 = 0;
 p4 = 0;
 p5 = 0;
 p6 = 0;
 W = [1+p1 p3 p5; p2 1+p4 p6]*[x;y;1];
dp = [1; 1; 1; 1; 1; 1];
while (sum(dp) > 1)
%Warp I with with W(x;p) to compute I(W(x;p))
 
 [r c] = size(T);
 
 
 [FX,FY] = gradient(It);
 H = zeros(6,6);
 dp = zeros(6,1);
 %gI = zeros(r,c);
 for r = 1:r
     for c = 1:c
         x = rect(1) + r;
         y = rect(2) + c;
         W = [1+p1 p3 p5; p2 1+p4 p6]*[x;y;1];
         
         IW(r,c) = It(W(1),W(2));
         gI(r,c,:) = [FX(x,y) FY(x,y)] * [x 0 y 0 1 0; 0 x 0 y 0 1];
        
         i(1:6) = gI(r,c,1:6);
         H = H + i'*i;
         diff(r,c) = It(x,y) - IW(r,c);
         dp = dp + i'*diff(r,c);
     end
 end
 
 
 dp = inv(H)*dp;
 %I(W(x;p)) is the intensity of the image at x,y warped by W
  
 
 %Compute the error image T(x) - I(W(x;p))
 
 %Warp the gradient of I with W(x;p)
 
 %Evaluate the Jacobian dW/dp at (x;p)

end


end